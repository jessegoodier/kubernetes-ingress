
prometheus:
  create: true
  scheme: http
  port: 9113
controller:
  nginxplus: true
  # hostNetwork: true
  image:
    repository: private-registry.nginx.com/nginx-ic/nginx-plus-ingress
    tag: 2.1.0-ubi
  serviceAccount:
    # the name of the pull secret to your repo, it should be in the same namespace
    imagePullSecretName: regcred
  # run a deployment or daemonset (one pod per node)
  kind: daemonset
  setAsDefaultIngress: true
  ingressClass: nginx
  # enableCustomResources this must be true to use the transportServer resource
  enableCustomResources: true
  # the below settings are shown for examples, edit as needed
  enablePreviewPolicies: true
  enableTLSPassthrough: true  
  appprotect:
    enable: false
  enableSnippets: true
  healthStatus: true
  latency-metrics: true
  nginxStatus:
    # Enable the NGINX stub_status, or the NGINX Plus API.
    enable: true
    port: 8080
    # Add IPv4 IP/CIDR blocks to the allow list for the NGINX Plus API. Separate multiple IP/CIDR by commas.
    allowCidrs: "0.0.0.0/0"
  # tell NGINX to listen on redis' default port
  globalConfiguration:
    create: true
    spec:
      listeners:
        - name: redis-tcp
          port: 6379
          protocol: TCP
  service:
    extraLabels:
      app: nginx-ingress-controller
    customPorts:
    - name: dashboard
      targetPort: 8080
      protocol: TCP
      port: 8080
    - name: prometheus
      targetPort: 9113
      protocol: TCP
      port: 9113
    - name: redis-tcp
      targetPort: 6379
      protocol: TCP
      port: 6379
  config:
    entries:
      # http2: "true"
      # smarter LB method:
      # lb-method: "least_time last_byte"
      # for debugging
      error-log-level: info
      # custom logging:
      log-format:  'remote_addr: "$remote_addr", remote_user: "$remote_user", time_local: "$time_local", request: "$request", status: $status, grpc_status: "$grpc_status", body_bytes_sent: $body_bytes_sent, http_referer: "$http_referer", http_user_agent: "$http_user_agent", http_x_forwarded_for: "$http_x_forwarded_for", resource_name: "$resource_name", resource_type: "$resource_type", resource_namespace: "$resource_namespace", service: "$service"'
      stream-log-format: 'remote_addr: $remote_addr, time: $time_local, protocol: $protocol, status: $status, bytes_sent: $bytes_sent, bytes_received: $bytes_received, session_time: $session_time, upstream_addr: $upstream_addr, upstream_bytes_sent: $upstream_bytes_sent, upstream_bytes_received: $upstream_bytes_received, upstream_connect_time: $upstream_connect_time, ssl_preread_server_name: $ssl_preread_server_name'
